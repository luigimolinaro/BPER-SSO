[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that
the implicit localhost does not match 'all'

PLAY [localhost] ***************************************************************

TASK [include_role : utils] ****************************************************

TASK [utils : include_vars] ****************************************************
ok: [localhost]

TASK [utils : include_vars] ****************************************************
ok: [localhost]

TASK [utils : debug] ***********************************************************
skipping: [localhost]

TASK [utils : fail] ************************************************************
skipping: [localhost]

TASK [utils : merging release_components_meta and global_components_meta] ******
ok: [localhost]

TASK [utils : merge with override_components_meta] *****************************
skipping: [localhost]

TASK [utils : merge with override_components_meta] *****************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check openshift cluster status] **********************************
included: /opt/ansible/ansible-play/roles/utils/tasks/check_cluster_healthy.yml for localhost

TASK [utils : checking ocp cluster connection status] **************************
changed: [localhost]

TASK [utils : fail] ************************************************************
skipping: [localhost]

TASK [utils : get cluster arch] ************************************************
[WARNING]: conditional statements should not include jinja2 templating
delimiters such as {{ }} or {% %}. Found: {{ (kube_arch.stdout |
from_json)['serverVersion'] is defined }}
changed: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : include_tasks] ***************************************************
skipping: [localhost]

TASK [utils : debug] ***********************************************************
skipping: [localhost]

TASK [utils : Print trace information] *****************************************
skipping: [localhost]

TASK [utils : remove any existing generated preview sh script] *****************
skipping: [localhost]

TASK [utils : remove any existing generated preview yaml file] *****************
skipping: [localhost]

TASK [utils : Create CPFS namespace if not present ibm-common-services] ********
skipping: [localhost]

TASK [utils : Create cpd operator namespace if not present ibm-common-services] ***
skipping: [localhost]

TASK [utils : ensure operator group for ibm-common-services namespace] *********
skipping: [localhost]

TASK [utils : ensure operator group for ibm-common-services namespace] *********
skipping: [localhost]

TASK [include_role : utils] ****************************************************

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : checking the status of all CRs] **********************************
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=redis)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=factsheet)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=replication)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=dpra)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=estap)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=ws_pipelines)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=model_train_classic)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=model_train_dwf)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=model_train)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=data_governor)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=watson_gateway)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=opencontent_auditwebhook)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=opencontent_etcd)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=opencontent_minio)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=ws_runtimes)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=watson_speech)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=wml_accelerator_instance)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=wml_accelerator)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=watson_ks)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=watson_discovery)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=watson_assistant)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=voice_gateway)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=productmaster_instance)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=productmaster)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=planning_analytics)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=openpages_instance)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=openpages)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=mongodb_cp4d)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=mongodb)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=informix_cp4d)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=informix)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=fdb_k8s)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=opencontent_fdb)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=opencontent_rabbitmq)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=opencontent_redis)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=opencontent_elasticsearch)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=match360)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=hee)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=edb_cp4d)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=postgresql)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=dods)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=db2wh)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=datagate)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=bigsql)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=db2oltp)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=datastage_ent_plus)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=datastage_ent)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=dashboard)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=cde)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=cognos_analytics)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=openscale)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=dv)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=dp)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=wkc)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=wml)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=rstudio)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=spss)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=ws)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=db2aaservice)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=db2u)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=dmc)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=mantaflow)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=iis)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=datarefinery)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=analyticsengine)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=ccs)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=cpd_platform)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=scheduler)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=zen)
included: /opt/ansible/ansible-play/roles/utils/tasks/get_status_cr.yml for localhost => (item=cpfs)

TASK [utils : Check if user have permission to access cp4d] ********************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : check CR status for redis if it exists] **************************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for FACTSHEET if it exists] **********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for ReplicationService if it exists] *************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for DpraService if it exists] ********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for EstapServiceCPDAddOn if it exists] ***********
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for WSPipelines if it exists] ********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for model_train_classic if it exists] ************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for model_train_dwf if it exists] ****************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for model_train if it exists] ********************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for data_governor if it exists] ******************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for watson_gateway if it exists] *****************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for opencontent_auditwebhook if it exists] *******
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for opencontent_etcd if it exists] ***************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for opencontent_minio if it exists] **************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for NotebookRuntime if it exists] ****************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************
included: /opt/ansible/ansible-play/roles/utils/tasks/report_cr_status.yml for localhost => (item={'apiVersion': 'ws.cpd.ibm.com/v1beta1', 'kind': 'NotebookRuntime', 'metadata': {'creationTimestamp': '2023-07-20T23:07:39Z', 'finalizers': ['ws.cpd.ibm.com/finalizer'], 'generation': 1, 'managedFields': [{'apiVersion': 'ws.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:spec': {'.': {}, 'f:kind': {}, 'f:license': {'.': {}, 'f:accept': {}}, 'f:version': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'time': '2023-07-20T23:07:39Z'}, {'apiVersion': 'ws.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:finalizers': {'.': {}, 'v:"ws.cpd.ibm.com/finalizer"': {}}}}, 'manager': 'ansible-operator', 'operation': 'Update', 'time': '2023-07-20T23:07:39Z'}, {'apiVersion': 'ws.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'.': {}, 'f:conditions': {}}}, 'manager': 'ansible-operator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T23:07:39Z'}, {'apiVersion': 'ws.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'f:operand': {'.': {}, 'f:available': {'.': {}, 'f:versions': {}}}, 'f:runtimeStatus': {}, 'f:runtimesOperatorBuild': {}, 'f:versions': {'.': {}, 'f:reconciled': {}}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T23:11:53Z'}], 'name': 'ibm-cpd-ws-runtime-222-py', 'namespace': 'cp4d', 'resourceVersion': '2613641', 'uid': '5e95a37c-085f-4cf1-8c30-e2339f13eb35'}, 'spec': {'kind': 'ibm-cpd-ws-runtime-222-py', 'license': {'accept': True}, 'version': '6.5.0'}, 'status': {'conditions': [{'ansibleResult': {'changed': 5, 'completion': '2023-07-20T23:11:54.018596', 'failures': 0, 'ok': 38, 'skipped': 20}, 'lastTransitionTime': '2023-07-20T23:07:39Z', 'message': 'Awaiting next reconciliation', 'reason': 'Successful', 'status': 'True', 'type': 'Running'}, {'lastTransitionTime': '2023-07-20T23:11:54Z', 'message': 'Last reconciliation succeeded', 'reason': 'Successful', 'status': 'True', 'type': 'Successful'}, {'lastTransitionTime': '2023-07-20T23:11:54Z', 'message': '', 'reason': '', 'status': 'False', 'type': 'Failure'}], 'operand': {'available': {'versions': ['5.3.0', '6.0.0', '6.1.0', '6.3.0', '6.4.0', '6.5.0']}}, 'runtimeStatus': 'Completed', 'runtimesOperatorBuild': '6.5.0012', 'versions': {'reconciled': '6.5.0'}}})

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : debug] ***********************************************************
ok: [localhost] => {
    "msg": {
        "apiVersion": "ws.cpd.ibm.com/v1beta1",
        "kind": "NotebookRuntime",
        "metadata": {
            "creationTimestamp": "2023-07-20T23:07:39Z",
            "finalizers": [
                "ws.cpd.ibm.com/finalizer"
            ],
            "generation": 1,
            "managedFields": [
                {
                    "apiVersion": "ws.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:spec": {
                            ".": {},
                            "f:kind": {},
                            "f:license": {
                                ".": {},
                                "f:accept": {}
                            },
                            "f:version": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "time": "2023-07-20T23:07:39Z"
                },
                {
                    "apiVersion": "ws.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:metadata": {
                            "f:finalizers": {
                                ".": {},
                                "v:\"ws.cpd.ibm.com/finalizer\"": {}
                            }
                        }
                    },
                    "manager": "ansible-operator",
                    "operation": "Update",
                    "time": "2023-07-20T23:07:39Z"
                },
                {
                    "apiVersion": "ws.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            ".": {},
                            "f:conditions": {}
                        }
                    },
                    "manager": "ansible-operator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T23:07:39Z"
                },
                {
                    "apiVersion": "ws.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            "f:operand": {
                                ".": {},
                                "f:available": {
                                    ".": {},
                                    "f:versions": {}
                                }
                            },
                            "f:runtimeStatus": {},
                            "f:runtimesOperatorBuild": {},
                            "f:versions": {
                                ".": {},
                                "f:reconciled": {}
                            }
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T23:11:53Z"
                }
            ],
            "name": "ibm-cpd-ws-runtime-222-py",
            "namespace": "cp4d",
            "resourceVersion": "2613641",
            "uid": "5e95a37c-085f-4cf1-8c30-e2339f13eb35"
        },
        "spec": {
            "kind": "ibm-cpd-ws-runtime-222-py",
            "license": {
                "accept": true
            },
            "version": "6.5.0"
        },
        "status": {
            "conditions": [
                {
                    "ansibleResult": {
                        "changed": 5,
                        "completion": "2023-07-20T23:11:54.018596",
                        "failures": 0,
                        "ok": 38,
                        "skipped": 20
                    },
                    "lastTransitionTime": "2023-07-20T23:07:39Z",
                    "message": "Awaiting next reconciliation",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Running"
                },
                {
                    "lastTransitionTime": "2023-07-20T23:11:54Z",
                    "message": "Last reconciliation succeeded",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Successful"
                },
                {
                    "lastTransitionTime": "2023-07-20T23:11:54Z",
                    "message": "",
                    "reason": "",
                    "status": "False",
                    "type": "Failure"
                }
            ],
            "operand": {
                "available": {
                    "versions": [
                        "5.3.0",
                        "6.0.0",
                        "6.1.0",
                        "6.3.0",
                        "6.4.0",
                        "6.5.0"
                    ]
                }
            },
            "runtimeStatus": "Completed",
            "runtimesOperatorBuild": "6.5.0012",
            "versions": {
                "reconciled": "6.5.0"
            }
        }
    }
}

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : Add ws_runtimes to installed_components if it shutdown or has shutdown error which will be used for restart cmd] ***
skipping: [localhost]

TASK [utils : Add ws_runtimes to installed_components if it is not shutdown which will be used for shutdown cmd] ***
skipping: [localhost]

TASK [utils : Add ws_runtimes to installed_components which will be used for delete cmd] ***
skipping: [localhost]

TASK [utils : lineinfile] ******************************************************
changed: [localhost -> localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for WatsonSpeech if it exists] *******************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Wmla if it exists] ***************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Wmla-add-on if it exists] ********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for KnowledgeStudio if it exists] ****************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for WatsonDiscovery if it exists] ****************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for WatsonAssistant if it exists] ****************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for VoiceGateway if it exists] *******************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for ProductMaster if it exists] ******************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for ProductMasterService if it exists] ***********
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for PAService if it exists] **********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for OpenPagesInstance if it exists] **************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for OpenPagesService if it exists] ***************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for CPDMongoDBService if it exists] **************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for mongodb if it exists] ************************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for InformixService if it exists] ****************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Informix if it exists] ***********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for fdb_k8s if it exists] ************************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for fdbcluster if it exists] *********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for opencontent_rabbitmq if it exists] ***********
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for opencontent_redis if it exists] **************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for opencontent_elasticsearch if it exists] ******
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for MasterDataManagement if it exists] ***********
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Hadoop if it exists] *************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for CPDEdbService if it exists] ******************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for postgresql if it exists] *********************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for DODS if it exists] ***************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Db2whService if it exists] *******************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for DatagateService if it exists] ****************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for BigsqlService if it exists] ******************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Db2oltpService if it exists] *****************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for DataStage if it exists] **********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for DataStage if it exists] **********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for dashboardservice if it exists] ***************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for CdeProxyService if it exists] ****************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for CAService if it exists] **********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for WOService if it exists] **********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for DvService if it exists] **********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for DP if it exists] *****************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for WKC if it exists] ****************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for WmlBase if it exists] ************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for RStudioAddon if it exists] *******************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Spss if it exists] ***************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************
included: /opt/ansible/ansible-play/roles/utils/tasks/report_cr_status.yml for localhost => (item={'apiVersion': 'spssmodeler.cpd.ibm.com/v1', 'kind': 'Spss', 'metadata': {'creationTimestamp': '2023-07-20T22:19:58Z', 'generation': 1, 'managedFields': [{'apiVersion': 'spssmodeler.cpd.ibm.com/v1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:spec': {'.': {}, 'f:blockStorageClass': {}, 'f:csNamespace': {}, 'f:fileStorageClass': {}, 'f:ignoreForMaintenance': {}, 'f:license': {'.': {}, 'f:accept': {}, 'f:license': {}}, 'f:version': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'time': '2023-07-20T22:19:58Z'}, {'apiVersion': 'spssmodeler.cpd.ibm.com/v1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'.': {}, 'f:conditions': {}}}, 'manager': 'ansible-operator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T22:19:58Z'}, {'apiVersion': 'spssmodeler.cpd.ibm.com/v1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'f:spssmodelerBuildNumber': {}, 'f:spssmodelerStatus': {}, 'f:type': {}, 'f:version': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T23:18:57Z'}], 'name': 'spss-sample', 'namespace': 'cp4d', 'resourceVersion': '2625004', 'uid': 'e2fa56d2-6237-4bab-a891-4f9a172c0300'}, 'spec': {'blockStorageClass': 'ibmc-file-gold-gid', 'csNamespace': 'cp4d', 'fileStorageClass': 'ibmc-file-gold-gid', 'ignoreForMaintenance': False, 'license': {'accept': True, 'license': 'Enterprise'}, 'version': '6.5.0'}, 'status': {'conditions': [{'ansibleResult': {'changed': 20, 'completion': '2023-07-20T23:18:58.129571', 'failures': 0, 'ok': 115, 'skipped': 41}, 'lastTransitionTime': '2023-07-20T22:19:58Z', 'message': 'Awaiting next reconciliation', 'reason': 'Successful', 'status': 'True', 'type': 'Running'}, {'lastTransitionTime': '2023-07-20T23:18:58Z', 'message': 'Last reconciliation succeeded', 'reason': 'Successful', 'status': 'True', 'type': 'Successful'}, {'lastTransitionTime': '2023-07-20T23:18:58Z', 'message': '', 'reason': '', 'status': 'False', 'type': 'Failure'}], 'spssmodelerBuildNumber': '6.5.0+20230406.182943.12', 'spssmodelerStatus': 'Completed', 'type': 'Ready', 'version': '6.5.0'}})

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : debug] ***********************************************************
ok: [localhost] => {
    "msg": {
        "apiVersion": "spssmodeler.cpd.ibm.com/v1",
        "kind": "Spss",
        "metadata": {
            "creationTimestamp": "2023-07-20T22:19:58Z",
            "generation": 1,
            "managedFields": [
                {
                    "apiVersion": "spssmodeler.cpd.ibm.com/v1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:spec": {
                            ".": {},
                            "f:blockStorageClass": {},
                            "f:csNamespace": {},
                            "f:fileStorageClass": {},
                            "f:ignoreForMaintenance": {},
                            "f:license": {
                                ".": {},
                                "f:accept": {},
                                "f:license": {}
                            },
                            "f:version": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "time": "2023-07-20T22:19:58Z"
                },
                {
                    "apiVersion": "spssmodeler.cpd.ibm.com/v1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            ".": {},
                            "f:conditions": {}
                        }
                    },
                    "manager": "ansible-operator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T22:19:58Z"
                },
                {
                    "apiVersion": "spssmodeler.cpd.ibm.com/v1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            "f:spssmodelerBuildNumber": {},
                            "f:spssmodelerStatus": {},
                            "f:type": {},
                            "f:version": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T23:18:57Z"
                }
            ],
            "name": "spss-sample",
            "namespace": "cp4d",
            "resourceVersion": "2625004",
            "uid": "e2fa56d2-6237-4bab-a891-4f9a172c0300"
        },
        "spec": {
            "blockStorageClass": "ibmc-file-gold-gid",
            "csNamespace": "cp4d",
            "fileStorageClass": "ibmc-file-gold-gid",
            "ignoreForMaintenance": false,
            "license": {
                "accept": true,
                "license": "Enterprise"
            },
            "version": "6.5.0"
        },
        "status": {
            "conditions": [
                {
                    "ansibleResult": {
                        "changed": 20,
                        "completion": "2023-07-20T23:18:58.129571",
                        "failures": 0,
                        "ok": 115,
                        "skipped": 41
                    },
                    "lastTransitionTime": "2023-07-20T22:19:58Z",
                    "message": "Awaiting next reconciliation",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Running"
                },
                {
                    "lastTransitionTime": "2023-07-20T23:18:58Z",
                    "message": "Last reconciliation succeeded",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Successful"
                },
                {
                    "lastTransitionTime": "2023-07-20T23:18:58Z",
                    "message": "",
                    "reason": "",
                    "status": "False",
                    "type": "Failure"
                }
            ],
            "spssmodelerBuildNumber": "6.5.0+20230406.182943.12",
            "spssmodelerStatus": "Completed",
            "type": "Ready",
            "version": "6.5.0"
        }
    }
}

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : Add spss to installed_components if it shutdown or has shutdown error which will be used for restart cmd] ***
skipping: [localhost]

TASK [utils : Add spss to installed_components if it is not shutdown which will be used for shutdown cmd] ***
skipping: [localhost]

TASK [utils : Add spss to installed_components which will be used for delete cmd] ***
skipping: [localhost]

TASK [utils : lineinfile] ******************************************************
changed: [localhost -> localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for WS if it exists] *****************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************
included: /opt/ansible/ansible-play/roles/utils/tasks/report_cr_status.yml for localhost => (item={'apiVersion': 'ws.cpd.ibm.com/v1beta1', 'kind': 'WS', 'metadata': {'creationTimestamp': '2023-07-20T22:59:04Z', 'generation': 1, 'managedFields': [{'apiVersion': 'ws.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:spec': {'.': {}, 'f:blockStorageClass': {}, 'f:docker_registry_prefix': {}, 'f:fileStorageClass': {}, 'f:ignoreForMaintenance': {}, 'f:license': {'.': {}, 'f:accept': {}, 'f:license': {}}, 'f:size': {}, 'f:storageClass': {}, 'f:version': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'time': '2023-07-20T22:59:04Z'}, {'apiVersion': 'ws.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'.': {}, 'f:conditions': {}}}, 'manager': 'ansible-operator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T22:59:04Z'}, {'apiVersion': 'ws.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'f:type': {}, 'f:versions': {'.': {}, 'f:reconciled': {}}, 'f:wsBuildNumber': {}, 'f:wsStatus': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T23:14:08Z'}], 'name': 'ws-cr', 'namespace': 'cp4d', 'resourceVersion': '2617140', 'uid': 'e1b052f0-008b-4321-920a-5218f868a764'}, 'spec': {'blockStorageClass': 'ibmc-file-gold-gid', 'docker_registry_prefix': 'cp.icr.io/cp/cpd', 'fileStorageClass': 'ibmc-file-gold-gid', 'ignoreForMaintenance': False, 'license': {'accept': True, 'license': 'Standard'}, 'size': 'small', 'storageClass': 'ibmc-file-gold-gid', 'version': '6.5.0'}, 'status': {'conditions': [{'ansibleResult': {'changed': 21, 'completion': '2023-07-20T23:14:09.433684', 'failures': 0, 'ok': 133, 'skipped': 68}, 'lastTransitionTime': '2023-07-20T22:59:04Z', 'message': 'Awaiting next reconciliation', 'reason': 'Successful', 'status': 'True', 'type': 'Running'}, {'lastTransitionTime': '2023-07-20T23:14:10Z', 'message': 'Last reconciliation succeeded', 'reason': 'Successful', 'status': 'True', 'type': 'Successful'}, {'lastTransitionTime': '2023-07-20T23:14:10Z', 'message': '', 'reason': '', 'status': 'False', 'type': 'Failure'}], 'type': 'Ready', 'versions': {'reconciled': '6.5.0'}, 'wsBuildNumber': 20, 'wsStatus': 'Completed'}})

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : debug] ***********************************************************
ok: [localhost] => {
    "msg": {
        "apiVersion": "ws.cpd.ibm.com/v1beta1",
        "kind": "WS",
        "metadata": {
            "creationTimestamp": "2023-07-20T22:59:04Z",
            "generation": 1,
            "managedFields": [
                {
                    "apiVersion": "ws.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:spec": {
                            ".": {},
                            "f:blockStorageClass": {},
                            "f:docker_registry_prefix": {},
                            "f:fileStorageClass": {},
                            "f:ignoreForMaintenance": {},
                            "f:license": {
                                ".": {},
                                "f:accept": {},
                                "f:license": {}
                            },
                            "f:size": {},
                            "f:storageClass": {},
                            "f:version": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "time": "2023-07-20T22:59:04Z"
                },
                {
                    "apiVersion": "ws.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            ".": {},
                            "f:conditions": {}
                        }
                    },
                    "manager": "ansible-operator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T22:59:04Z"
                },
                {
                    "apiVersion": "ws.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            "f:type": {},
                            "f:versions": {
                                ".": {},
                                "f:reconciled": {}
                            },
                            "f:wsBuildNumber": {},
                            "f:wsStatus": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T23:14:08Z"
                }
            ],
            "name": "ws-cr",
            "namespace": "cp4d",
            "resourceVersion": "2617140",
            "uid": "e1b052f0-008b-4321-920a-5218f868a764"
        },
        "spec": {
            "blockStorageClass": "ibmc-file-gold-gid",
            "docker_registry_prefix": "cp.icr.io/cp/cpd",
            "fileStorageClass": "ibmc-file-gold-gid",
            "ignoreForMaintenance": false,
            "license": {
                "accept": true,
                "license": "Standard"
            },
            "size": "small",
            "storageClass": "ibmc-file-gold-gid",
            "version": "6.5.0"
        },
        "status": {
            "conditions": [
                {
                    "ansibleResult": {
                        "changed": 21,
                        "completion": "2023-07-20T23:14:09.433684",
                        "failures": 0,
                        "ok": 133,
                        "skipped": 68
                    },
                    "lastTransitionTime": "2023-07-20T22:59:04Z",
                    "message": "Awaiting next reconciliation",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Running"
                },
                {
                    "lastTransitionTime": "2023-07-20T23:14:10Z",
                    "message": "Last reconciliation succeeded",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Successful"
                },
                {
                    "lastTransitionTime": "2023-07-20T23:14:10Z",
                    "message": "",
                    "reason": "",
                    "status": "False",
                    "type": "Failure"
                }
            ],
            "type": "Ready",
            "versions": {
                "reconciled": "6.5.0"
            },
            "wsBuildNumber": 20,
            "wsStatus": "Completed"
        }
    }
}

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : Add ws to installed_components if it shutdown or has shutdown error which will be used for restart cmd] ***
skipping: [localhost]

TASK [utils : Add ws to installed_components if it is not shutdown which will be used for shutdown cmd] ***
skipping: [localhost]

TASK [utils : Add ws to installed_components which will be used for delete cmd] ***
skipping: [localhost]

TASK [utils : lineinfile] ******************************************************
changed: [localhost -> localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Db2aaserviceService if it exists] ************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for db2u if it exists] ***************************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Dmcaddon if it exists] ***********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for mantaflow if it exists] **********************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for iis if it exists] ****************************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for DataRefinery if it exists] *******************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************
included: /opt/ansible/ansible-play/roles/utils/tasks/report_cr_status.yml for localhost => (item={'apiVersion': 'datarefinery.cpd.ibm.com/v1beta1', 'kind': 'DataRefinery', 'metadata': {'creationTimestamp': '2023-07-20T23:00:48Z', 'generation': 1, 'managedFields': [{'apiVersion': 'datarefinery.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:spec': {'.': {}, 'f:blockStorageClass': {}, 'f:docker_registry_prefix': {}, 'f:fileStorageClass': {}, 'f:ignoreForMaintenance': {}, 'f:license': {'.': {}, 'f:accept': {}, 'f:license': {}}, 'f:scaleConfig': {}, 'f:storageClass': {}, 'f:version': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'time': '2023-07-20T23:00:48Z'}, {'apiVersion': 'datarefinery.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'.': {}, 'f:conditions': {}}}, 'manager': 'ansible-operator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T23:00:48Z'}, {'apiVersion': 'datarefinery.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'f:datarefineryBuildNumber': {}, 'f:datarefineryStatus': {}, 'f:datarefineryVersion': {}, 'f:type': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T23:06:58Z'}], 'name': 'datarefinery-sample', 'namespace': 'cp4d', 'resourceVersion': '2605794', 'uid': 'eb1f7794-594c-4bf5-8eea-7f911fa43c39'}, 'spec': {'blockStorageClass': 'ibmc-file-gold-gid', 'docker_registry_prefix': 'cp.icr.io/cp/cpd', 'fileStorageClass': 'ibmc-file-gold-gid', 'ignoreForMaintenance': False, 'license': {'accept': True, 'license': 'Standard'}, 'scaleConfig': 'small', 'storageClass': 'ibmc-file-gold-gid', 'version': '6.5.0'}, 'status': {'conditions': [{'ansibleResult': {'changed': 14, 'completion': '2023-07-20T23:06:59.832983', 'failures': 0, 'ok': 74, 'skipped': 33}, 'lastTransitionTime': '2023-07-20T23:00:48Z', 'message': 'Awaiting next reconciliation', 'reason': 'Successful', 'status': 'True', 'type': 'Running'}, {'lastTransitionTime': '2023-07-20T23:07:00Z', 'message': 'Last reconciliation succeeded', 'reason': 'Successful', 'status': 'True', 'type': 'Successful'}, {'lastTransitionTime': '2023-07-20T23:07:00Z', 'message': '', 'reason': '', 'status': 'False', 'type': 'Failure'}], 'datarefineryBuildNumber': 744, 'datarefineryStatus': 'Completed', 'datarefineryVersion': '6.5.0', 'type': 'Ready'}})

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : debug] ***********************************************************
ok: [localhost] => {
    "msg": {
        "apiVersion": "datarefinery.cpd.ibm.com/v1beta1",
        "kind": "DataRefinery",
        "metadata": {
            "creationTimestamp": "2023-07-20T23:00:48Z",
            "generation": 1,
            "managedFields": [
                {
                    "apiVersion": "datarefinery.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:spec": {
                            ".": {},
                            "f:blockStorageClass": {},
                            "f:docker_registry_prefix": {},
                            "f:fileStorageClass": {},
                            "f:ignoreForMaintenance": {},
                            "f:license": {
                                ".": {},
                                "f:accept": {},
                                "f:license": {}
                            },
                            "f:scaleConfig": {},
                            "f:storageClass": {},
                            "f:version": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "time": "2023-07-20T23:00:48Z"
                },
                {
                    "apiVersion": "datarefinery.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            ".": {},
                            "f:conditions": {}
                        }
                    },
                    "manager": "ansible-operator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T23:00:48Z"
                },
                {
                    "apiVersion": "datarefinery.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            "f:datarefineryBuildNumber": {},
                            "f:datarefineryStatus": {},
                            "f:datarefineryVersion": {},
                            "f:type": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T23:06:58Z"
                }
            ],
            "name": "datarefinery-sample",
            "namespace": "cp4d",
            "resourceVersion": "2605794",
            "uid": "eb1f7794-594c-4bf5-8eea-7f911fa43c39"
        },
        "spec": {
            "blockStorageClass": "ibmc-file-gold-gid",
            "docker_registry_prefix": "cp.icr.io/cp/cpd",
            "fileStorageClass": "ibmc-file-gold-gid",
            "ignoreForMaintenance": false,
            "license": {
                "accept": true,
                "license": "Standard"
            },
            "scaleConfig": "small",
            "storageClass": "ibmc-file-gold-gid",
            "version": "6.5.0"
        },
        "status": {
            "conditions": [
                {
                    "ansibleResult": {
                        "changed": 14,
                        "completion": "2023-07-20T23:06:59.832983",
                        "failures": 0,
                        "ok": 74,
                        "skipped": 33
                    },
                    "lastTransitionTime": "2023-07-20T23:00:48Z",
                    "message": "Awaiting next reconciliation",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Running"
                },
                {
                    "lastTransitionTime": "2023-07-20T23:07:00Z",
                    "message": "Last reconciliation succeeded",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Successful"
                },
                {
                    "lastTransitionTime": "2023-07-20T23:07:00Z",
                    "message": "",
                    "reason": "",
                    "status": "False",
                    "type": "Failure"
                }
            ],
            "datarefineryBuildNumber": 744,
            "datarefineryStatus": "Completed",
            "datarefineryVersion": "6.5.0",
            "type": "Ready"
        }
    }
}

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : Add datarefinery to installed_components if it shutdown or has shutdown error which will be used for restart cmd] ***
skipping: [localhost]

TASK [utils : Add datarefinery to installed_components if it is not shutdown which will be used for shutdown cmd] ***
skipping: [localhost]

TASK [utils : Add datarefinery to installed_components which will be used for delete cmd] ***
skipping: [localhost]

TASK [utils : lineinfile] ******************************************************
changed: [localhost -> localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for AnalyticsEngine if it exists] ****************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for CCS if it exists] ****************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************
included: /opt/ansible/ansible-play/roles/utils/tasks/report_cr_status.yml for localhost => (item={'apiVersion': 'ccs.cpd.ibm.com/v1beta1', 'kind': 'CCS', 'metadata': {'creationTimestamp': '2023-07-20T22:20:41Z', 'finalizers': ['ccs.cpd.ibm.com/finalizer'], 'generation': 1, 'managedFields': [{'apiVersion': 'ccs.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:spec': {'.': {}, 'f:blockStorageClass': {}, 'f:docker_registry_prefix': {}, 'f:fileStorageClass': {}, 'f:license': {'.': {}, 'f:accept': {}}, 'f:scaleConfig': {}, 'f:storageClass': {}, 'f:version': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'time': '2023-07-20T22:20:41Z'}, {'apiVersion': 'ccs.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:finalizers': {'.': {}, 'v:"ccs.cpd.ibm.com/finalizer"': {}}}}, 'manager': 'ansible-operator', 'operation': 'Update', 'time': '2023-07-20T22:20:41Z'}, {'apiVersion': 'ccs.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'.': {}, 'f:conditions': {}}}, 'manager': 'ansible-operator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T22:20:41Z'}, {'apiVersion': 'ccs.cpd.ibm.com/v1beta1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'f:ccsBuildNumber': {}, 'f:ccsStatus': {}, 'f:type': {}, 'f:versions': {'.': {}, 'f:reconciled': {}}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T22:58:20Z'}], 'name': 'ccs-cr', 'namespace': 'cp4d', 'resourceVersion': '2591950', 'uid': '57f98d28-58a7-4704-a7ca-5a92dc7f2362'}, 'spec': {'blockStorageClass': 'ibmc-file-gold-gid', 'docker_registry_prefix': 'cp.icr.io/cp/cpd', 'fileStorageClass': 'ibmc-file-gold-gid', 'license': {'accept': True}, 'scaleConfig': 'small', 'storageClass': 'ibmc-file-gold-gid', 'version': '6.5.0'}, 'status': {'ccsBuildNumber': 123, 'ccsStatus': 'Completed', 'conditions': [{'ansibleResult': {'changed': 136, 'completion': '2023-07-20T22:58:20.652612', 'failures': 0, 'ok': 372, 'skipped': 136}, 'lastTransitionTime': '2023-07-20T22:20:41Z', 'message': 'Awaiting next reconciliation', 'reason': 'Successful', 'status': 'True', 'type': 'Running'}, {'lastTransitionTime': '2023-07-20T22:58:21Z', 'message': 'Last reconciliation succeeded', 'reason': 'Successful', 'status': 'True', 'type': 'Successful'}, {'lastTransitionTime': '2023-07-20T22:58:21Z', 'message': '', 'reason': '', 'status': 'False', 'type': 'Failure'}], 'type': 'Ready', 'versions': {'reconciled': '6.5.0'}}})

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : debug] ***********************************************************
ok: [localhost] => {
    "msg": {
        "apiVersion": "ccs.cpd.ibm.com/v1beta1",
        "kind": "CCS",
        "metadata": {
            "creationTimestamp": "2023-07-20T22:20:41Z",
            "finalizers": [
                "ccs.cpd.ibm.com/finalizer"
            ],
            "generation": 1,
            "managedFields": [
                {
                    "apiVersion": "ccs.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:spec": {
                            ".": {},
                            "f:blockStorageClass": {},
                            "f:docker_registry_prefix": {},
                            "f:fileStorageClass": {},
                            "f:license": {
                                ".": {},
                                "f:accept": {}
                            },
                            "f:scaleConfig": {},
                            "f:storageClass": {},
                            "f:version": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "time": "2023-07-20T22:20:41Z"
                },
                {
                    "apiVersion": "ccs.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:metadata": {
                            "f:finalizers": {
                                ".": {},
                                "v:\"ccs.cpd.ibm.com/finalizer\"": {}
                            }
                        }
                    },
                    "manager": "ansible-operator",
                    "operation": "Update",
                    "time": "2023-07-20T22:20:41Z"
                },
                {
                    "apiVersion": "ccs.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            ".": {},
                            "f:conditions": {}
                        }
                    },
                    "manager": "ansible-operator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T22:20:41Z"
                },
                {
                    "apiVersion": "ccs.cpd.ibm.com/v1beta1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            "f:ccsBuildNumber": {},
                            "f:ccsStatus": {},
                            "f:type": {},
                            "f:versions": {
                                ".": {},
                                "f:reconciled": {}
                            }
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T22:58:20Z"
                }
            ],
            "name": "ccs-cr",
            "namespace": "cp4d",
            "resourceVersion": "2591950",
            "uid": "57f98d28-58a7-4704-a7ca-5a92dc7f2362"
        },
        "spec": {
            "blockStorageClass": "ibmc-file-gold-gid",
            "docker_registry_prefix": "cp.icr.io/cp/cpd",
            "fileStorageClass": "ibmc-file-gold-gid",
            "license": {
                "accept": true
            },
            "scaleConfig": "small",
            "storageClass": "ibmc-file-gold-gid",
            "version": "6.5.0"
        },
        "status": {
            "ccsBuildNumber": 123,
            "ccsStatus": "Completed",
            "conditions": [
                {
                    "ansibleResult": {
                        "changed": 136,
                        "completion": "2023-07-20T22:58:20.652612",
                        "failures": 0,
                        "ok": 372,
                        "skipped": 136
                    },
                    "lastTransitionTime": "2023-07-20T22:20:41Z",
                    "message": "Awaiting next reconciliation",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Running"
                },
                {
                    "lastTransitionTime": "2023-07-20T22:58:21Z",
                    "message": "Last reconciliation succeeded",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Successful"
                },
                {
                    "lastTransitionTime": "2023-07-20T22:58:21Z",
                    "message": "",
                    "reason": "",
                    "status": "False",
                    "type": "Failure"
                }
            ],
            "type": "Ready",
            "versions": {
                "reconciled": "6.5.0"
            }
        }
    }
}

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : Add ccs to installed_components if it shutdown or has shutdown error which will be used for restart cmd] ***
skipping: [localhost]

TASK [utils : Add ccs to installed_components if it is not shutdown which will be used for shutdown cmd] ***
skipping: [localhost]

TASK [utils : Add ccs to installed_components which will be used for delete cmd] ***
skipping: [localhost]

TASK [utils : lineinfile] ******************************************************
changed: [localhost -> localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Ibmcpd if it exists] *************************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************
included: /opt/ansible/ansible-play/roles/utils/tasks/report_cr_status.yml for localhost => (item={'apiVersion': 'cpd.ibm.com/v1', 'kind': 'Ibmcpd', 'metadata': {'creationTimestamp': '2023-07-20T21:29:23Z', 'generation': 1, 'managedFields': [{'apiVersion': 'cpd.ibm.com/v1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:spec': {'.': {}, 'f:blockStorageClass': {}, 'f:csNamespace': {}, 'f:fileStorageClass': {}, 'f:license': {'.': {}, 'f:accept': {}, 'f:license': {}}, 'f:version': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'time': '2023-07-20T21:29:23Z'}, {'apiVersion': 'cpd.ibm.com/v1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'.': {}, 'f:conditions': {}}}, 'manager': 'ansible-operator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T21:29:23Z'}, {'apiVersion': 'cpd.ibm.com/v1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'f:controlPlaneOperatorVersion': {}, 'f:controlPlaneStatus': {}, 'f:lastReconcileEnd': {}, 'f:lastReconcileStart': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T22:15:07Z'}], 'name': 'ibmcpd-cr', 'namespace': 'cp4d', 'resourceVersion': '2527085', 'uid': '1cc9402d-5c98-469f-90f8-b0647b6853a5'}, 'spec': {'blockStorageClass': 'ibmc-file-gold-gid', 'csNamespace': 'cp4d', 'fileStorageClass': 'ibmc-file-gold-gid', 'license': {'accept': True, 'license': 'Enterprise'}, 'version': '4.6.6'}, 'status': {'conditions': [{'ansibleResult': {'changed': 11, 'completion': '2023-07-20T22:15:07.330927', 'failures': 0, 'ok': 53, 'skipped': 22}, 'lastTransitionTime': '2023-07-20T21:29:23Z', 'message': 'Awaiting next reconciliation', 'reason': 'Successful', 'status': 'True', 'type': 'Running'}, {'lastTransitionTime': '2023-07-20T22:15:07Z', 'message': 'Last reconciliation succeeded', 'reason': 'Successful', 'status': 'True', 'type': 'Successful'}, {'lastTransitionTime': '2023-07-20T22:15:07Z', 'message': '', 'reason': '', 'status': 'False', 'type': 'Failure'}], 'controlPlaneOperatorVersion': 'cpdPlatform operator 3.8.0 build 3', 'controlPlaneStatus': 'Completed', 'lastReconcileEnd': '2023-07-20_22:15:05', 'lastReconcileStart': '2023-07-20_21:29:26'}})

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : debug] ***********************************************************
ok: [localhost] => {
    "msg": {
        "apiVersion": "cpd.ibm.com/v1",
        "kind": "Ibmcpd",
        "metadata": {
            "creationTimestamp": "2023-07-20T21:29:23Z",
            "generation": 1,
            "managedFields": [
                {
                    "apiVersion": "cpd.ibm.com/v1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:spec": {
                            ".": {},
                            "f:blockStorageClass": {},
                            "f:csNamespace": {},
                            "f:fileStorageClass": {},
                            "f:license": {
                                ".": {},
                                "f:accept": {},
                                "f:license": {}
                            },
                            "f:version": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "time": "2023-07-20T21:29:23Z"
                },
                {
                    "apiVersion": "cpd.ibm.com/v1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            ".": {},
                            "f:conditions": {}
                        }
                    },
                    "manager": "ansible-operator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T21:29:23Z"
                },
                {
                    "apiVersion": "cpd.ibm.com/v1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            "f:controlPlaneOperatorVersion": {},
                            "f:controlPlaneStatus": {},
                            "f:lastReconcileEnd": {},
                            "f:lastReconcileStart": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T22:15:07Z"
                }
            ],
            "name": "ibmcpd-cr",
            "namespace": "cp4d",
            "resourceVersion": "2527085",
            "uid": "1cc9402d-5c98-469f-90f8-b0647b6853a5"
        },
        "spec": {
            "blockStorageClass": "ibmc-file-gold-gid",
            "csNamespace": "cp4d",
            "fileStorageClass": "ibmc-file-gold-gid",
            "license": {
                "accept": true,
                "license": "Enterprise"
            },
            "version": "4.6.6"
        },
        "status": {
            "conditions": [
                {
                    "ansibleResult": {
                        "changed": 11,
                        "completion": "2023-07-20T22:15:07.330927",
                        "failures": 0,
                        "ok": 53,
                        "skipped": 22
                    },
                    "lastTransitionTime": "2023-07-20T21:29:23Z",
                    "message": "Awaiting next reconciliation",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Running"
                },
                {
                    "lastTransitionTime": "2023-07-20T22:15:07Z",
                    "message": "Last reconciliation succeeded",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Successful"
                },
                {
                    "lastTransitionTime": "2023-07-20T22:15:07Z",
                    "message": "",
                    "reason": "",
                    "status": "False",
                    "type": "Failure"
                }
            ],
            "controlPlaneOperatorVersion": "cpdPlatform operator 3.8.0 build 3",
            "controlPlaneStatus": "Completed",
            "lastReconcileEnd": "2023-07-20_22:15:05",
            "lastReconcileStart": "2023-07-20_21:29:26"
        }
    }
}

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : Add cpd_platform to installed_components if it shutdown or has shutdown error which will be used for restart cmd] ***
skipping: [localhost]

TASK [utils : Add cpd_platform to installed_components if it is not shutdown which will be used for shutdown cmd] ***
skipping: [localhost]

TASK [utils : Add cpd_platform to installed_components which will be used for delete cmd] ***
skipping: [localhost]

TASK [utils : lineinfile] ******************************************************
changed: [localhost -> localhost]

TASK [utils : Check if user have permission to access ibm-common-services] *****
ok: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for Scheduling if it exists] *********************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for ZenService if it exists] *********************
ok: [localhost]

TASK [utils : for all CRs that were found] *************************************
included: /opt/ansible/ansible-play/roles/utils/tasks/report_cr_status.yml for localhost => (item={'apiVersion': 'zen.cpd.ibm.com/v1', 'kind': 'ZenService', 'metadata': {'creationTimestamp': '2023-07-20T21:34:18Z', 'generation': 1, 'managedFields': [{'apiVersion': 'zen.cpd.ibm.com/v1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:ownerReferences': {'.': {}, 'k:{"uid":"1cc9402d-5c98-469f-90f8-b0647b6853a5"}': {}}}, 'f:spec': {'.': {}, 'f:blockStorageClass': {}, 'f:cert_manager_enabled': {}, 'f:cloudPakType': {}, 'f:cloudpakfordata': {}, 'f:fileStorageClass': {}, 'f:host_header_check': {}, 'f:iamIntegration': {}, 'f:skip_placeholder_init': {}, 'f:version': {}, 'f:zenDefaultIngressReencrypt': {}, 'f:zen_pak_version': {}, 'f:zen_vault_enabled': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'time': '2023-07-20T21:34:18Z'}, {'apiVersion': 'zen.cpd.ibm.com/v1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'.': {}, 'f:conditions': {}}}, 'manager': 'ansible-operator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T21:34:18Z'}, {'apiVersion': 'zen.cpd.ibm.com/v1', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:status': {'f:Progress': {}, 'f:ProgressMessage': {}, 'f:currentVersion': {}, 'f:supportedOperandVersions': {}, 'f:url': {}, 'f:zenOperatorBuildNumber': {}, 'f:zenStatus': {}}}, 'manager': 'OpenAPI-Generator', 'operation': 'Update', 'subresource': 'status', 'time': '2023-07-20T22:13:32Z'}], 'name': 'lite-cr', 'namespace': 'cp4d', 'ownerReferences': [{'apiVersion': 'cpd.ibm.com/v1', 'kind': 'Ibmcpd', 'name': 'ibmcpd-cr', 'uid': '1cc9402d-5c98-469f-90f8-b0647b6853a5'}], 'resourceVersion': '2525552', 'uid': '73fb23a8-1589-4eef-a89a-1147e63ed770'}, 'spec': {'blockStorageClass': 'ibmc-file-gold-gid', 'cert_manager_enabled': True, 'cloudPakType': 'data', 'cloudpakfordata': True, 'fileStorageClass': 'ibmc-file-gold-gid', 'host_header_check': True, 'iamIntegration': False, 'skip_placeholder_init': True, 'version': '4.8.4', 'zenDefaultIngressReencrypt': True, 'zen_pak_version': '3.8.0', 'zen_vault_enabled': True}, 'status': {'Progress': '100%', 'ProgressMessage': 'The Current Operation Is Completed', 'conditions': [{'ansibleResult': {'changed': 99, 'completion': '2023-07-20T22:14:05.14609', 'failures': 0, 'ok': 692, 'skipped': 1096}, 'lastTransitionTime': '2023-07-20T21:34:18Z', 'message': 'Awaiting next reconciliation', 'reason': 'Successful', 'status': 'True', 'type': 'Running'}, {'lastTransitionTime': '2023-07-20T22:14:05Z', 'message': 'Last reconciliation succeeded', 'reason': 'Successful', 'status': 'True', 'type': 'Successful'}, {'lastTransitionTime': '2023-07-20T22:14:05Z', 'message': '', 'reason': '', 'status': 'False', 'type': 'Failure'}], 'currentVersion': '4.8.4', 'supportedOperandVersions': '4.8.4, 4.8.3, 4.8.2, 4.8.1, 4.8.0, 4.7.2, 4.7.1, 4.7.0, 4.5.8, 4.5.7, 4.5.6, 4.5.5, 4.5.4, 4.5.3, 4.5.2, 4.5.1, 4.5.0, 4.4.4, 4.4.3, 4.4.2, 4.4.1, 4.4.0, 4.3.2, 4.3.1, 4.3.0, 4.2.0, 4.1.1, 4.1.0, 4.0.1, 4.0.0', 'url': 'cpd-cp4d.itzroks-66100317qr-o7uzhg-4b4a324f027aea19c5cbc0c3275c4656-0000.eu-de.containers.appdomain.cloud', 'zenOperatorBuildNumber': 'zen operator 1.8.4 build 21', 'zenStatus': 'Completed'}})

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : debug] ***********************************************************
ok: [localhost] => {
    "msg": {
        "apiVersion": "zen.cpd.ibm.com/v1",
        "kind": "ZenService",
        "metadata": {
            "creationTimestamp": "2023-07-20T21:34:18Z",
            "generation": 1,
            "managedFields": [
                {
                    "apiVersion": "zen.cpd.ibm.com/v1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:metadata": {
                            "f:ownerReferences": {
                                ".": {},
                                "k:{\"uid\":\"1cc9402d-5c98-469f-90f8-b0647b6853a5\"}": {}
                            }
                        },
                        "f:spec": {
                            ".": {},
                            "f:blockStorageClass": {},
                            "f:cert_manager_enabled": {},
                            "f:cloudPakType": {},
                            "f:cloudpakfordata": {},
                            "f:fileStorageClass": {},
                            "f:host_header_check": {},
                            "f:iamIntegration": {},
                            "f:skip_placeholder_init": {},
                            "f:version": {},
                            "f:zenDefaultIngressReencrypt": {},
                            "f:zen_pak_version": {},
                            "f:zen_vault_enabled": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "time": "2023-07-20T21:34:18Z"
                },
                {
                    "apiVersion": "zen.cpd.ibm.com/v1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            ".": {},
                            "f:conditions": {}
                        }
                    },
                    "manager": "ansible-operator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T21:34:18Z"
                },
                {
                    "apiVersion": "zen.cpd.ibm.com/v1",
                    "fieldsType": "FieldsV1",
                    "fieldsV1": {
                        "f:status": {
                            "f:Progress": {},
                            "f:ProgressMessage": {},
                            "f:currentVersion": {},
                            "f:supportedOperandVersions": {},
                            "f:url": {},
                            "f:zenOperatorBuildNumber": {},
                            "f:zenStatus": {}
                        }
                    },
                    "manager": "OpenAPI-Generator",
                    "operation": "Update",
                    "subresource": "status",
                    "time": "2023-07-20T22:13:32Z"
                }
            ],
            "name": "lite-cr",
            "namespace": "cp4d",
            "ownerReferences": [
                {
                    "apiVersion": "cpd.ibm.com/v1",
                    "kind": "Ibmcpd",
                    "name": "ibmcpd-cr",
                    "uid": "1cc9402d-5c98-469f-90f8-b0647b6853a5"
                }
            ],
            "resourceVersion": "2525552",
            "uid": "73fb23a8-1589-4eef-a89a-1147e63ed770"
        },
        "spec": {
            "blockStorageClass": "ibmc-file-gold-gid",
            "cert_manager_enabled": true,
            "cloudPakType": "data",
            "cloudpakfordata": true,
            "fileStorageClass": "ibmc-file-gold-gid",
            "host_header_check": true,
            "iamIntegration": false,
            "skip_placeholder_init": true,
            "version": "4.8.4",
            "zenDefaultIngressReencrypt": true,
            "zen_pak_version": "3.8.0",
            "zen_vault_enabled": true
        },
        "status": {
            "Progress": "100%",
            "ProgressMessage": "The Current Operation Is Completed",
            "conditions": [
                {
                    "ansibleResult": {
                        "changed": 99,
                        "completion": "2023-07-20T22:14:05.14609",
                        "failures": 0,
                        "ok": 692,
                        "skipped": 1096
                    },
                    "lastTransitionTime": "2023-07-20T21:34:18Z",
                    "message": "Awaiting next reconciliation",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Running"
                },
                {
                    "lastTransitionTime": "2023-07-20T22:14:05Z",
                    "message": "Last reconciliation succeeded",
                    "reason": "Successful",
                    "status": "True",
                    "type": "Successful"
                },
                {
                    "lastTransitionTime": "2023-07-20T22:14:05Z",
                    "message": "",
                    "reason": "",
                    "status": "False",
                    "type": "Failure"
                }
            ],
            "currentVersion": "4.8.4",
            "supportedOperandVersions": "4.8.4, 4.8.3, 4.8.2, 4.8.1, 4.8.0, 4.7.2, 4.7.1, 4.7.0, 4.5.8, 4.5.7, 4.5.6, 4.5.5, 4.5.4, 4.5.3, 4.5.2, 4.5.1, 4.5.0, 4.4.4, 4.4.3, 4.4.2, 4.4.1, 4.4.0, 4.3.2, 4.3.1, 4.3.0, 4.2.0, 4.1.1, 4.1.0, 4.0.1, 4.0.0",
            "url": "cpd-cp4d.itzroks-66100317qr-o7uzhg-4b4a324f027aea19c5cbc0c3275c4656-0000.eu-de.containers.appdomain.cloud",
            "zenOperatorBuildNumber": "zen operator 1.8.4 build 21",
            "zenStatus": "Completed"
        }
    }
}

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : set_fact] ********************************************************
ok: [localhost]

TASK [utils : Add zen to installed_components if it shutdown or has shutdown error which will be used for restart cmd] ***
skipping: [localhost]

TASK [utils : Add zen to installed_components if it is not shutdown which will be used for shutdown cmd] ***
skipping: [localhost]

TASK [utils : Add zen to installed_components which will be used for delete cmd] ***
skipping: [localhost]

TASK [utils : lineinfile] ******************************************************
changed: [localhost -> localhost]

TASK [utils : Check if user have permission to access cp4d] ********************
skipping: [localhost]

TASK [utils : set_fact] ********************************************************
skipping: [localhost]

TASK [utils : check CR status for cpfs if it exists] ***************************
skipping: [localhost]

TASK [utils : for all CRs that were found] *************************************
skipping: [localhost]

TASK [utils : checking the status of all CRs for tethered namespace {{ tethered_instance_ns }}] ***
skipping: [localhost] => (item=redis) 
skipping: [localhost] => (item=factsheet) 
skipping: [localhost] => (item=replication) 
skipping: [localhost] => (item=dpra) 
skipping: [localhost] => (item=estap) 
skipping: [localhost] => (item=ws_pipelines) 
skipping: [localhost] => (item=model_train_classic) 
skipping: [localhost] => (item=model_train_dwf) 
skipping: [localhost] => (item=model_train) 
skipping: [localhost] => (item=data_governor) 
skipping: [localhost] => (item=watson_gateway) 
skipping: [localhost] => (item=opencontent_auditwebhook) 
skipping: [localhost] => (item=opencontent_etcd) 
skipping: [localhost] => (item=opencontent_minio) 
skipping: [localhost] => (item=ws_runtimes) 
skipping: [localhost] => (item=watson_speech) 
skipping: [localhost] => (item=wml_accelerator_instance) 
skipping: [localhost] => (item=wml_accelerator) 
skipping: [localhost] => (item=watson_ks) 
skipping: [localhost] => (item=watson_discovery) 
skipping: [localhost] => (item=watson_assistant) 
skipping: [localhost] => (item=voice_gateway) 
skipping: [localhost] => (item=productmaster_instance) 
skipping: [localhost] => (item=productmaster) 
skipping: [localhost] => (item=planning_analytics) 
skipping: [localhost] => (item=openpages_instance) 
skipping: [localhost] => (item=openpages) 
skipping: [localhost] => (item=mongodb_cp4d) 
skipping: [localhost] => (item=mongodb) 
skipping: [localhost] => (item=informix_cp4d) 
skipping: [localhost] => (item=informix) 
skipping: [localhost] => (item=fdb_k8s) 
skipping: [localhost] => (item=opencontent_fdb) 
skipping: [localhost] => (item=opencontent_rabbitmq) 
skipping: [localhost] => (item=opencontent_redis) 
skipping: [localhost] => (item=opencontent_elasticsearch) 
skipping: [localhost] => (item=match360) 
skipping: [localhost] => (item=hee) 
skipping: [localhost] => (item=edb_cp4d) 
skipping: [localhost] => (item=postgresql) 
skipping: [localhost] => (item=dods) 
skipping: [localhost] => (item=db2wh) 
skipping: [localhost] => (item=datagate) 
skipping: [localhost] => (item=bigsql) 
skipping: [localhost] => (item=db2oltp) 
skipping: [localhost] => (item=datastage_ent_plus) 
skipping: [localhost] => (item=datastage_ent) 
skipping: [localhost] => (item=dashboard) 
skipping: [localhost] => (item=cde) 
skipping: [localhost] => (item=cognos_analytics) 
skipping: [localhost] => (item=openscale) 
skipping: [localhost] => (item=dv) 
skipping: [localhost] => (item=dp) 
skipping: [localhost] => (item=wkc) 
skipping: [localhost] => (item=wml) 
skipping: [localhost] => (item=rstudio) 
skipping: [localhost] => (item=spss) 
skipping: [localhost] => (item=ws) 
skipping: [localhost] => (item=db2aaservice) 
skipping: [localhost] => (item=db2u) 
skipping: [localhost] => (item=dmc) 
skipping: [localhost] => (item=mantaflow) 
skipping: [localhost] => (item=iis) 
skipping: [localhost] => (item=datarefinery) 
skipping: [localhost] => (item=analyticsengine) 
skipping: [localhost] => (item=ccs) 
skipping: [localhost] => (item=cpd_platform) 
skipping: [localhost] => (item=scheduler) 
skipping: [localhost] => (item=zen) 
skipping: [localhost] => (item=cpfs) 

TASK [utils : remove duplicate items] ******************************************
ok: [localhost]

PLAY RECAP *********************************************************************
localhost                  : ok=190  changed=9    unreachable=0    failed=0    skipped=257  rescued=0    ignored=0   

